stages:
  #load_data:
  #  cmd: python src/cassandraDBLoad.py --config=params.yaml
  #  deps:
  #  - src/get_data.py
  #  - src/cassandraDBLoad.py
  #  - data_given/Train.csv
  #  - data_given/Test.csv
  #  - secure-connect-ineuron.zip

  preprocess_data:
    cmd: python src/preprocess_data.py --config=params.yaml
    deps:
    - src/get_data.py
    - src/preprocess_data.py
    outs:
    - data/pre-processed/data.csv

  one_hot_encoding:
    cmd: python src/one_hot_encoding.py --config=params.yaml
    deps:
    - data/pre-processed/data.csv
    - src/get_data.py 
    - src/one_hot_encoding.py
    outs:
    - data/one_hot_encoded/one_hot_encoded.csv

  split_data:
    cmd: python src/split_data.py --config=params.yaml
    deps:
    - data/one_hot_encoded/one_hot_encoded.csv
    - src/get_data.py
    - src/split_data.py
    outs:
    - data/split-data/train.csv
    - data/split-data/test.csv
    - data/split-data/val.csv
    
  train_and_evaluate:
    cmd: python src/train_and_evaluate.py --config=params.yaml
    deps:
    - data/split-data/train.csv
    - data/split-data/test.csv
    - src/split_data.py 
    - src/train_and_evaluate.py
    params:
    - estimators.DecisionTree.params.max_depth
    - estimators.DecisionTree.params.min_samples_leaf

    #metrics:
    #- report/scores.json:
    #    cache: false
    #- report/params.json:
    #    cache: false
    #outs:
    #- saved_models/model.joblib
  #log_production_model:
  #  cmd: python src/log_production_model.py --config=params.yaml
  #  deps:
  #  - src/log_production_model.py
